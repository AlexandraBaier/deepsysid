import pathlib
from typing import Callable, Dict, List, Literal

import torch

from deepsysid.explainability.base import BaseExplainerConfig
from deepsysid.explainability.explainers.lime import LIMEExplainerConfig
from deepsysid.explainability.metrics import (
    ExplanationComplexityMetric,
    LipschitzEstimateMetric,
    NMSEInfidelityMetric,
)
from deepsysid.metrics import (
    EfficiencyMetric,
    FitRatioMetric,
    MeanAbsoluteErrorMetric,
    MeanSquaredErrorMetric,
    NormalizedRootMeanSquaredErrorMetric,
    PearsonProductMomentCorrelationCoefficientMetric,
    RefinedEfficiencyMetric,
    RefinedIndexOfAgreementMetric,
    RootMeanSquaredErrorMetric,
    Trajectory4DOFRootMeanSquaredErrorMetric,
    TrajectoryNED6DOFRootMeanSquaredErrorMetric,
)
from deepsysid.models.base import DynamicIdentificationModelConfig
from deepsysid.pipeline.configuration import (
    ExperimentConfiguration,
    ExperimentExplainerConfiguration,
    ExperimentExplanationMetricConfiguration,
    ExperimentMetricConfiguration,
    ExperimentTestConfiguration,
    ExperimentTrackingConfiguration,
    SessionConfiguration,
)
from deepsysid.pipeline.evaluation import evaluate_model
from deepsysid.pipeline.explaining import explain_model
from deepsysid.pipeline.testing.bounded_residual import (
    BoundedResidualInferenceTestConfig,
)
from deepsysid.pipeline.testing.runner import test_model as run_model
from deepsysid.pipeline.testing.stability.base import StabilityTestConfig
from deepsysid.pipeline.training import train_model


def get_4dof_ship_data(idx: int) -> str:
    data = [
        """time,n,deltal,deltar,Vw,alpha_x,alpha_y,u,v,p,r,phi
0,366.361745840294,-0.000667792634540374,0.000505048081770158,2.3058404686817005,0.730398366799378,0.6830213948162981,1.9059304828813899,0.0684893236802277,0.0,0.0,0.0
1,376.009382965212,0.0269512428759281,-0.0275011392958471,2.3710182821464,0.727234974709556,0.6863885864138412,2.03884441675177,0.18236857829187098,0.000587684355071629,-0.0036830559064337702,0.000936654084037869
2,382.34862259643,0.0399361912676506,-0.0386306646481679,2.38084458528952,0.723730265315054,0.6900829682487479,1.75950097621673,-0.0907581959044003,0.0006082768166230059,0.00044169002253877196,0.000435782455662448
3,389.835857065013,0.046755325565030995,-0.0476111408237287,2.01843484456215,0.7251342690183051,0.688607502061434,1.8462101011187,-0.0129042181621594,0.0032779386787100103,-0.0023536959270990102,0.00386953909692567
4,397.31677097260905,0.0465441406483103,-0.0470695790336945,2.33779539530011,0.7334518382840741,0.6797414220993989,2.01280015548737,0.141466073569668,-0.00285088013158514,-0.00197233211138525,0.00319969463721392
5,411.037526153852,0.0475113622931288,-0.0478837999799709,2.2579219525721004,0.725006329292575,0.688742203212281,1.9047863152502098,0.032017955996823,-0.0004908282313401509,-3.38223622529014e-05,0.00156485107290116
6,419.834839809093,0.0476024129876059,-0.0475745525927269,2.09954646541522,0.7463645963071289,0.665537293755426,1.9694847193221,0.0819232145703766,-0.0017846855220480602,-0.0016273348867198699,0.000865956187296124
7,431.362052087903,0.0492558766870364,-0.0472582689380661,1.9292578042825401,0.7512140476399749,0.6600586751406011,1.8406128022701,-0.0601186496833452,0.0018434444745084398,-0.00191870528947524,-0.000214538485454607
8,440.001269939275,0.0505244210016282,-0.0491827914164941,2.2348180624252003,0.750048207665694,0.6613831613954799,1.80209581087529,-0.10596250199770699,6.52428567097881e-05,-0.000134102825985837,0.00185243119797418
9,448.01114330711096,0.0475339737771629,-0.0471199403213803,2.4150973185285096,0.794690353250433,0.607015026544403,1.9421733156566299,0.0102059143100228,0.00199819766511667,-0.00291369272389946,0.00175095253104463
10,453.779241630088,0.0510934717190151,-0.0473708812140114,2.52585588320771,0.785814733641072,0.6184619668117121,1.9827173295557499,0.0396450907678682,-0.0006267600417853259,-0.000243546019181656,0.00303212683318588
11,469.899137029269,0.0479787596364806,-0.049357300283615,2.42101943661268,0.777615519733192,0.628740092144662,1.9010992498300099,-0.0605564510217396,-0.00291966822607557,-0.0010748929753576699,0.0007322554691207019
12,481.455921169419,0.0482615570713931,-0.0482176587124583,2.26130023352433,0.7440363943080659,0.668139090268674,1.8973496065086002,-0.0909402651126372,0.00254079738926358,-0.00426160596718087,0.000480278493763642
13,496.868072923762,0.0495610667574923,-0.04789348086903599,2.44388119339854,0.745244170547202,0.666791666313709,1.9698747587019598,-0.0287622691600405,0.000284020704586125,6.5191979181466795e-06,0.00285572237558318
14,492.06966843026703,0.0477390520516743,-0.0480920960439072,2.36462928249883,0.738092911851911,0.6746990836469,2.00638317109559,-0.00912760523045755,-0.0013898607423967302,0.0006906044450530179,0.0012929558203169699
15,510.28828476126404,0.0480895981835682,-0.0480341395626073,2.3924964658650096,0.7055382483431201,0.708671842339543,2.19829687061914,0.14681771627624898,-0.000733501221043244,-0.00323433427988446,0.000293903130811568
16,519.72845676638,0.0494187789415763,-0.0500312747250407,2.3670946589473902,0.7427016782925621,0.66962244366614,2.19671240042976,0.125964175041588,0.0014544605924601,-0.0013991678566734,0.00047942210056506297
17,528.440210831323,0.0486114894740257,-0.0449484797858022,2.2239290630314104,0.7426607316361321,0.6696678562434399,1.8855781702953702,-0.213260381534752,-0.00019172120483289698,-0.0018320427633703698,0.0015216453441886401
18,540.736157472181,0.0481167108185372,-0.04731957304601599,2.3536633049014704,0.7726003403600129,0.634892679179397,1.95621171766204,-0.16660011376941,0.00152142558668708,-0.00168753082629437,0.0027489586480538
19,554.7193552566259,0.048357490543737995,-0.048641062031917,2.09795573215677,0.7824316658348991,0.622736451718401,2.18252547728919,0.0262853145885283,0.000342950387680747,-0.00245570754581566,0.00230577116068575
20,557.299080150986,0.0480849372093471,-0.0496190122688432,2.04730215212223,0.786247230461866,0.617912042762596,2.15990846414575,-0.0221439876298504,-0.00224386046851402,-0.000991772358433273,0.00171106129909671
""",
        """time,n,deltal,deltar,Vw,alpha_x,alpha_y,u,v,p,r,phi
21,564.3107944310141,0.0489098535851955,-0.0499450500761649,2.2325448549184905,0.785451730767589,0.61892291816849,2.1235568505213003,-0.0939716989566955,0.0018208408610357102,-0.00346762084207453,0.00128992548435836
22,581.435747138284,0.0471868286210771,-0.0494624215284578,2.0825598430425702,0.791563363203636,0.611087098565948,2.1382475138205304,-0.10785727694437301,0.00109157037786951,-0.00179984710739245,0.0033771152219848103
23,585.863942338357,0.0484304808249975,-0.0502449934662426,2.11947136788917,0.751423159658476,0.659820608293552,2.22430816353167,-0.05088802470871201,-0.00113574960044098,-1.52621308365223e-05,0.0025745508462775603
24,592.357095954986,0.0495590862538259,-0.0487453486559155,2.37692514231587,0.764606792330707,0.6444970543933821,2.1980948320543603,-0.11480458998541498,-0.00102585252829535,-0.00231787088216553,0.00253343507346804
25,610.813325995469,0.0492209392028801,-0.0476745619043104,2.25598159879732,0.755596671196924,0.655037151981571,2.3783000426212597,0.0268326310539142,-0.0041953405872452295,-0.000686208485274425,-0.00112859374965346
26,623.2146864672831,0.0502642654992404,-0.0500649464612156,2.04226966449034,0.7451973180394359,0.6668440276307739,2.5370801871700697,0.14996419191978302,0.00120634568413891,-0.00041786510931677797,-0.00148749123887759
27,629.973509865586,0.0497467382377424,-0.049018132214289,2.11473024342906,0.75398724418404,0.656889058827864,2.51593126506447,0.0841134527967458,0.00293564881583197,-0.0018456805277939198,0.000153474064364278
28,638.338062289309,0.0499527618390601,-0.0473071149134004,2.0342217952031003,0.7503942884661059,0.660990477871994,2.5478041702581002,0.0798424647292343,0.0034077817189130397,-0.000878104049765945,0.00308508236733473
29,651.503533264615,0.0472760229296414,-0.0496264779540709,2.0944133601411,0.7683225105231899,0.640062903020745,2.52443703545437,0.0149362260770117,-0.0008772381169774151,-0.000551750039108445,0.00422955349047749
30,662.723510801128,0.0466345507842106,-0.0487777129525742,2.0452868987414,0.750064522094947,0.661364659393348,2.41680023669542,-0.13152557316196303,-0.0022760829620211698,-0.00023496838893635201,0.00395929276189966
31,666.683813903983,0.0497653765621995,-0.0497444401826025,1.9150571790881599,0.789517091670385,0.613728573524434,2.4244273914902004,-0.177506312631962,-0.0028780074190809897,-0.00213026218273713,0.000907581868895502
32,676.168193087789,0.0481945292373757,-0.0489530927387408,1.8550384668683402,0.748834756902453,0.6627567478757529,2.79806638164975,0.156838936740067,0.00046815402246421905,-0.00156184612541957,-0.00043008799880084304
33,690.726603767494,0.0480793187551375,-0.0477035916653254,2.0346057135146003,0.7319936015457299,0.681311505330793,2.7232218268215096,0.0383181923562937,0.004163650106505329,-0.000962944604130817,0.00160443430940216
34,707.10274851918,0.0490902487377042,-0.0472625358026622,2.04517903743056,0.74804422972353,0.6636488758201371,2.64295285251989,-0.0931502037602669,-9.775902980469571e-05,-0.00206282346514767,0.00473063069692614
35,705.049122249327,0.0480516620855833,-0.0492243538507275,2.20436172427571,0.745755867934535,0.66621932232652,2.82143515720516,0.0375958407431133,-0.00310685982455854,-0.000338851563455044,0.00136415417269076
36,725.1835525815429,0.0467957801868756,-0.0495387542547914,2.10117461514138,0.700471372700256,0.713680499962987,2.8646802813984,0.0359379243961616,0.00505722701650636,-0.00330727158306405,0.003060070507789
37,732.980040949776,0.049735143607402,-0.0482757555662046,2.2615825374434997,0.711847048342993,0.7023345212684399,3.0574323139993704,0.18112504378107297,0.00350751807703769,-0.00408497806372406,0.008326151257355809
38,747.665442022873,0.0476028196071043,-0.0471675286115593,2.08749005613369,0.674172246870521,0.738574154401271,2.82963243736869,-0.103883525956029,-0.0048246523269643,-0.00344935971915691,0.00787778869154465
39,750.2143287024479,0.0485435356486737,-0.0499673811653817,2.1677500263187097,0.6565633651801711,0.7542708714402859,3.1174152747957997,0.128439177074828,-0.00959943390656522,-0.0018749600339355102,-1.46921291257485e-05
40,756.762577065957,0.0490262581737373,-0.047776932845968,2.13492408098303,0.660176029988559,0.7511109168615151,3.22509510693856,0.18436231005274697,-0.005688196154280361,0.0007191232275966911,-0.00827355445874645
41,772.0408281644251,0.0503336857725858,-0.0482384264424621,2.2005892873369,0.66722786146666,0.744853664072768,3.1417223607876896,0.0455261140087404,0.00612810143164519,5.24662089428631e-05,-0.00846814650158034
""",
        """time,n,deltal,deltar,Vw,alpha_x,alpha_y,u,v,p,r,phi
42,779.2635275622839,0.0468853911485151,-0.0478154102753596,2.21787400884755,0.665219036391537,0.7466482663358399,3.13895994107151,-0.0137046617807481,0.0102645287565933,-0.000152058626934923,0.000521446018352467
43,789.022927546412,0.0471439487035629,-0.0478147664012548,1.89153447114517,0.6888499433089599,0.724903963020787,3.19082914571521,-0.0148121123841945,0.00616051534502947,-5.2382185474143796e-05,0.0103820082923054
44,800.6603765163161,0.0479852125797857,-0.0475803757919274,1.9982662735018601,0.6990188316190289,0.715103260405075,3.3685858706937,0.11070698831124401,-0.0022273507791980003,0.00016967210795063102,0.0126854407043369
45,810.0462749208169,0.0480359090434938,-0.0477878083932674,1.97442822705701,0.7337435968956791,0.679426474325656,3.04559238003484,-0.267255037853298,-0.00784260653952282,0.00044681388008737695,0.0068376325914880605
46,820.3415461469341,0.0473398665248326,-0.0454620405465667,1.9961749139061498,0.727043916054143,0.6865909583796279,3.47601523442486,0.0988634956813197,-0.0071648641535183,-0.00165904982891938,-0.00186940174452088
47,831.7170910232879,0.0487948568904334,-0.0506951847748682,2.05131821362133,0.7403819376013779,0.672186422410948,3.30347696078805,-0.13304202031598,9.570838810689849e-05,-0.000693268629283579,-0.00579431817690246
48,836.915495858015,0.049438901340214,-0.0481586423689419,1.9976323882872098,0.728956791682802,0.684559709491813,3.4493398891425002,-0.0426420781941031,0.00912982654614647,-0.0010266600144954198,-0.000412595464901244
49,840.2677814517401,0.0498405201854952,-0.0479171021778955,1.9476794690689998,0.734704964718532,0.678386773764009,3.4519490315912598,-0.104626579999396,0.0048715483670076,-0.0011385856811959802,0.00797402853038287
50,856.0107635148421,0.0491486982457547,-0.0488037145149412,2.17035741396947,0.7250123861283589,0.6887358274116879,3.7653862360667203,0.151490329951141,-0.000222907318386342,-0.0011978863916079301,0.00903786083987956
51,867.690589946488,0.048756045552412,-0.0473752070940022,1.9581170152161798,0.681406220832082,0.7319054325603409,3.5688828382577205,-0.096819898753626,-0.0055101506184428,-0.000127673873513424,0.0075958910313072
52,881.862577275917,0.0484617782664631,-0.0498023401968519,2.0956322770523,0.680068979845401,0.733148131452324,3.75013029590742,0.0317939697931826,-0.0061414461728741205,0.00203608313882804,0.000387880895960535
53,891.0335330488,0.0472820306501893,-0.0483449122805428,2.16533180027389,0.6754225672041241,0.7374309158906959,3.9376792081457697,0.151401570549767,0.00303636905833323,-0.00123762392878589,-0.000628337344864338
54,903.010085705154,0.049588343897845,-0.0484130678616242,2.12906249471842,0.65885141195615,0.7522730999865591,3.79033507738183,-0.0612431155562325,0.00352233568095115,-0.0014211358150077302,0.00279079223450074
55,913.4312888519501,0.0517470503858245,-0.0501125418049593,2.0785272828729298,0.663384664663422,0.7482785488635891,3.77286168264359,-0.133728483697076,0.000757257561729081,0.0009050637709503071,0.00537081248621796
56,918.762735187833,0.0470824691602568,-0.0485587536464941,2.1140423553957097,0.6742719858304038,0.738483100093918,4.11978318023555,0.14892783563361098,0.000431067675545431,0.000267987615445264,0.00568321817903605
57,932.09587512621,0.0500344918279096,-0.047994268565317,2.2203487818000003,0.7130266289229201,0.7011369527038321,3.97020186272801,-0.0629837066493498,7.88361544243121e-05,-0.00014950744697415601,0.00535722229905478
58,942.6889443040891,0.0505529187900295,-0.0472126676967679,2.06485265361489,0.700409770358031,0.713740956921355,4.087741846300831,-0.00833019913516923,0.000244404627605965,-0.000541015804193715,0.00522212564291635
59,948.472863284931,0.0476632131049097,-0.0480968653361294,2.08671586351264,0.7237762226733341,0.6900347668724529,4.16934931949569,0.00857470871205421,-0.0005542869728544519,-0.000413522703097472,0.00525395447194166
60,964.270018721296,0.0489632410466911,-0.0489243541187817,1.7367185229698,0.7162282044941529,0.697866146970235,4.188045906921779,-0.0360388584879017,8.421782012194941e-05,-0.000873922589953951,0.00554811659663379
61,966.892211478738,0.0477650626918437,-0.0482912296371558,1.9353854458714,0.715659673741693,0.698449161628772,4.411354720173151,0.116142908929917,5.4867469118364504e-05,-0.00225475301015267,0.0073422420355471205
62,980.6345171475509,0.0477078453856838,-0.046800667435083,1.95440414881116,0.723079128462368,0.690765209012514,4.469737071132231,0.10033878805219,-0.0023162647254260397,-0.00151016889420793,0.00513054948608715
""",
    ]
    return data[idx % len(data)]


def get_4dof_ship_state_names() -> List[str]:
    return ['u', 'v', 'p', 'r', 'phi']


def get_4dof_ship_control_names() -> List[str]:
    return ['n', 'deltal', 'deltar', 'Vw']


def get_cartpole_control_names() -> List[str]:
    return ['u_1']


def get_cartpole_state_names() -> List[str]:
    return ['y_1']


def get_cartpole_initial_state_names() -> List[str]:
    return ['x_1', 'x_2', 'x_3', 'x_4']


def get_cartpole_data(idx: int) -> str:
    data = [
        """time,u_1,y_1,x_1,x_2,x_3,x_4
0.0,-3.0351281214596177,0.0,0.0,0.0,0.0,0.0
0.02,-3.0351281214596177,0.0008868246892476906,-0.0005921507860974374,-0.05921328236211637,0.0008868246892476906,0.0886413952638928
0.04,-3.0351281214596177,0.0035451506788474947,-0.002368505253437115,-0.1184260790698376,0.0035451506788474947,0.1772737915224965
0.06,-3.0351281214596177,0.00798082577143157,-0.005329332804492792,-0.1776634279288785,0.00798082577143157,0.2664505353073426
0.08,-3.0351281214596177,0.014210516248230982,-0.009475376446114734,-0.23694979486481696,0.014210516248230982,0.356725411503283
0.1,-3.0351281214596177,0.022261541213280087,-0.014807842484890388,-0.2963090777069502,0.022261541213280087,0.44865402956073835
0.12,-3.0351281214596177,0.03217100188374671,-0.02132824330167728,-0.3557634255051903,0.03217100188374671,0.5427931977134851
0.14,-3.0351281214596177,0.04398354352730949,-0.029037975011671484,-0.41533029527766663,0.04398354352730949,0.6397011470530569
0.16,-3.0351281214596177,0.05776383728657986,-0.03794036747823885,-0.4750369077539486,0.05776383728657986,0.7399463438895029
0.18,-3.0351281214596177,0.07358833581734443,-0.048039042149699424,-0.5349064994155128,0.07358833581734443,0.8440972487219154
0.2,-3.0351281214596177,0.09154352092017587,-0.05933758849512398,-0.5949558020998322,0.09154352092017587,0.9527207097490487
0.22,-3.0351281214596177,0.11172590354043291,-0.07183956400433386,-0.6551950430003759,0.11172590354043291,1.0663819628693192
0.24,-3.0351281214596177,0.13424202376826044,-0.0855484941879013,-0.7156279446666098,0.13424202376826044,1.1856446316808045
0.26,-3.0351281214596177,0.1592084508385895,-0.10046787257714902,-0.7762517250039969,0.1592084508385895,1.3110707274812463
0.28,-3.0351281214596177,0.18675178313113713,-0.11660116072415058,-0.8370570972739951,0.18675178313113713,1.4432206492680455
0.3,-3.0351281214596177,0.21700864817040644,-0.13395178820173012,-0.8980282700940602,0.21700864817040644,1.5826531837382667
0.32,-3.0351281214596177,0.25012570262568684,-0.15252315260346258,-0.9591429474376443,0.25012570262568684,1.729925505288637
0.34,-3.0351281214596177,0.2862196024909844,-0.17230597355940747,-1.0203192215790928,0.2862196024909844,1.8852338248904814
0.36,-3.0351281214596177,0.3254591013699316,-0.19329976779235047,-1.0814776482007786,0.3254591013699316,2.0489451827085308
0.38,-3.0351281214596177,0.36807003111227277,-0.21551644519081692,-1.1425636540678201,0.36807003111227277,2.2217357024268556
0.4,-3.0351281214596177,0.414268404602521,-0.23896136049780267,-1.203479907999717,0.414268404602521,2.404090751464312
0.42,-3.0351281214596177,0.4642604153568882,-0.26363331319185257,-1.2640863204193118,0.4642604153568882,2.596304937743623
0.44,-3.0351281214596177,0.5182424375232855,-0.2895245474870608,-1.3242000433527907,0.5182424375232855,2.7984821096913763
0.46,-3.0351281214596177,0.5764010258813221,-0.3166207523330701,-1.3835954704296825,0.5764010258813221,3.0105353562380253
0.48,-3.0351281214596177,0.6389129158423059,-0.3449010614150726,-1.4420042368828585,0.6389129158423059,3.2321870068178877
0.5,-3.0351281214596177,0.7059450234492446,-0.3743380531538092,-1.4991152195485347,0.7059450234492446,3.462968631369149
""",
        """time,u_1,y_1,x_1,x_2,x_3,x_4
0.0,9.772680236601055,0.0,0.0,0.0,0.0,0.0
0.02,9.772680236601055,-0.0028553000533670155,0.0019066073794691187,0.1906575758280742,-0.0028553000533670155,-0.2854087045588218
0.04,9.772680236601055,-0.0114142796509513,0.007626106669460126,0.3813105897790517,-0.0114142796509513,-0.5707727412734198
0.06,9.772680236601055,-0.02569627564280208,0.017159494933124995,0.5720351782865982,-0.02569627564280208,-0.8578533434738655
0.08,9.772680236601055,-0.0457521048873655,0.0305085970014773,0.7628828152503675,-0.0457521048873655,-1.148299847094049
0.1,9.772680236601055,-0.07166305790065293,0.04767592774244423,0.953878041064844,-0.07166305790065293,-1.443642380267385
0.12,9.772680236601055,-0.10353213183800054,0.06866253938498001,1.145008659036567,-0.10353213183800054,-1.7452264824834447
0.14,9.772680236601055,-0.14146281721199097,0.0934622030168968,1.3361865829237711,-0.14146281721199097,-2.0539842375712296
0.16,9.772680236601055,-0.18566282459390188,0.12208682668549282,1.527336039978959,-0.18566282459390188,-2.3711170964077377
0.18,9.772680236601055,-0.23633709003510284,0.15454152031108365,1.7182824315837149,-0.23633709003510284,-2.6973718198750682
0.2,9.772680236601055,-0.2936687554008388,0.1908200356689434,1.9087324866384396,-0.2936687554008388,-3.0329070313778983
0.22,9.772680236601055,-0.35781916837023,0.23090476638930416,2.098274261562347,-0.35781916837023,-3.377293216843481
0.24,9.772680236601055,-0.4289278824362722,0.2747667479573568,2.2863771402934683,-0.4289278824362722,-3.7295127247216486
0.26,9.772680236601055,-0.507112656905837,0.32236565771325043,2.472391834288649,-0.507112656905837,-4.087959765984811
0.28,9.772680236601055,-0.5924694568996706,0.3736498148520925,2.655550382523549,-0.5924694568996706,-4.450440414127957
0.3,9.772680236601055,-0.6850724533523952,0.4285561804239487,2.8349661514926447,-0.6850724533523952,-4.8141726051686495
0.32,9.772680236601055,-0.7849489438510335,0.4870183338687449,3.00966494973549,-0.7849489438510335,-5.1756346011392
0.34,9.772680236601055,-0.8918935834952842,0.548983651411224,3.1788383368800606,-0.8918935834952842,-5.530215226421565
0.36,9.772680236601055,-1.0058187419364177,0.6142696215565395,3.34162855346331,-1.0058187419364177,-5.875288319844357
0.38,9.772680236601055,-1.1265912094512256,0.6826925679791895,3.4974968294998066,-1.1265912094512256,-6.208182896668295
0.4,9.772680236601055,-1.2539708723253375,0.7540953439116379,3.6463078653389815,-1.2539708723253375,-6.525684686311586
0.42,9.772680236601055,-1.3876107128532214,0.8283473321443153,3.788329831665127,-1.3876107128532214,-6.824036132349928
0.44,9.772680236601055,-1.5270568093381853,0.9053444450256187,3.9242343694973982,-1.5270568093381853,-7.098936392516509
0.46,9.772680236601055,-1.6717483360923744,0.9850091244619117,4.055096590189812,-1.6717483360923744,-7.345541338702005
0.48,9.772680236601055,-1.8210175634367722,1.067290341917524,4.182395075431248,-1.8210175634367722,-7.5584635569545835
0.5,9.772680236601055,-1.9740898577012032,1.1521635984147518,4.308011877245447,-1.9740898577012032,-7.731772347479902
""",
        """time,u_1,y_1,x_1,x_2,x_3,x_4
0.0,-1.3909720801108492,0.0,0.0,0.0,0.0,0.0
0.02,-1.3909720801108492,0.0004064256313086258,-0.0002713778198584719,-0.027136927159494933,0.0004064256313086258,0.04062360710529388
0.04,-1.3909720801108492,0.0016247181384796887,-0.001085466510392745,-0.054273668090577556,0.0016247181384796887,0.08124327955223737
0.06,-1.3909720801108492,0.00365755129657772,-0.0024423879531505757,-0.08142174972676565,0.00365755129657772,0.12211285138282665
0.08,-1.3909720801108492,0.0065125973112120945,-0.004342489483927282,-0.10859271339593855,0.0065125973112120945,0.16348772749345103
0.1,-1.3909720801108492,0.010202456620048565,-0.006786340434677192,-0.1357981445017452,0.010202456620048565,0.20562566224970033
0.12,-1.3909720801108492,0.014744444987805354,-0.009774710079585091,-0.1630496497345494,0.014744444987805354,0.2487890453541845
0.14,-1.3909720801108492,0.020160025212792122,-0.013308507928544605,-0.19035884938332692,0.020160025212792122,0.2932518274589292
0.16,-1.3909720801108492,0.02647824765797335,-0.01738909685164996,-0.2177376919051563,0.02647824765797335,0.3392720909911235
0.18,-1.3909720801108492,0.03373415349848603,-0.022018088231514514,-0.2451981109234766,0.03373415349848603,0.3871164112818276
0.2,-1.3909720801108492,0.041968370143501695,-0.027197297980652506,-0.27275196932832435,0.041968370143501695,0.437064537975819
0.22,-1.3909720801108492,0.05122711123622628,-0.03292874654147905,-0.3004110592763336,0.05122711123622628,0.48940939503159214
0.24,-1.3909720801108492,0.06156217665390031,-0.03921465888631014,-0.3281871021907362,0.06156217665390031,0.5444570807213586
0.26,-1.3909720801108492,0.07303095250779881,-0.04605746451736269,-0.3560917487613614,0.07303095250779881,0.6025268676310473
0.28,-1.3909720801108492,0.0856964111432312,-0.05345979746675443,-0.384136578944636,0.0856964111432312,0.6639512026603038
0.3,-1.3909720801108492,0.09962711113954151,-0.06142449629650401,-0.41233310196358464,0.09962711113954151,0.7290757070224914
0.32,-1.3909720801108492,0.1148971973101082,-0.06995460409853099,-0.4406927563078292,0.1148971973101082,0.7982591762446896
0.34,-1.3909720801108492,0.13157946092654152,-0.07905012244563336,-0.46920212458748933,0.13157946092654152,0.8717976953849461
0.36,-1.3909720801108492,0.149761556901757,-0.08871294964051074,-0.49786051211077487,0.149761556901757,0.9500437612635518
0.38,-1.3909720801108492,0.16955435982217,-0.09895063873396137,-0.526705657106835,0.16955435982217,1.033490017425519
0.4,-1.3909720801108492,0.19107520751295737,-0.10976977271980218,-0.5557619810513975,0.19107520751295737,1.122610917033844
0.42,-1.3909720801108492,0.2144478182659306,-0.12117593007692254,-0.5850403232406906,0.2144478182659306,1.2178619077348967
0.44,-1.3909720801108492,0.2398022908395357,-0.13317368476928446,-0.6145379407914433,0.2398022908395357,1.3196794316584195
0.46,-1.3909720801108492,0.2672751044588533,-0.1457666062459223,-0.6442385086408855,0.2672751044588533,1.4284809254175281
0.48,-1.3909720801108492,0.2970091188155983,-0.15895725944094297,-0.6741121195467471,0.2970091188155983,1.5446648201087108
0.5,-1.3909720801108492,0.3291535740681208,-0.17274720477352587,-0.7041152840872591,0.3291535740681208,1.6686105413118293
""",
    ]
    return data[idx % len(data)]


def get_quadcopter_data(idx: int) -> str:
    data = [
        """time,x,y,z,phi,theta,psi,n1,n2,n3,n4,n1_cmd,n2_cmd,n3_cmd,n4_cmd,dx,dy,dz,p,q,r
0.01,7.387242798354087e-05,-9.034331961591213e-05,0.0001265939643346772,0.012586334632959759,0.03156736613435922,0.29388469138138185,76.58575199652259,77.30743419761546,80.13349901572091,74.80619218579649,103.35992110210034,104.66249141562137,108.2027166047465,101.21637990208453,0.002287242798353844,-0.003300331961591222,-0.0007406035665290277,0.009470576650185171,0.017057458104890753,0.005965236268704627
0.02,0.0001002687242798365,-0.0001232953772290809,0.0001271440329217885,0.012679157644218075,0.0317386776154589,0.2939421624501929,76.72156468327582,77.07453066382661,79.79322391488812,75.93865379132838,104.37493205572989,105.89057054262457,108.400706443283,102.16179040698658,0.0026396296296295626,-0.0032952057613168757,5.5006858711129135e-05,0.01574213372204585,0.01571092296963542,0.008690867095476097
0.03,0.0001361032921810704,-0.00015706093278463647,0.00013774759945128767,0.012833821078229585,0.03189687556106935,0.29402702840990247,76.8404478565331,77.07102764549406,79.68817753638906,76.82027101699013,105.10370685134399,106.7936828254109,108.456837350193,103.18738700936595,0.00358345679012339,-0.003376555555555558,0.0010603566529499182,0.021888187163008586,0.016583097744160405,0.011581583609894705
0.04,0.00018852880658436208,-0.00019323914951989028,0.00015430452674896204,0.013049009412929285,0.032064178444822324,0.2941406476153363,76.93746068629831,77.31008395989967,79.7844215342042,77.51543220727085,105.52346315591835,107.34492359165712,108.42197417220878,104.23811378504405,0.005242551440329168,-0.003617821673525381,0.0016556927297674364,0.027178654712085817,0.020545319530103655,0.014288101897901324
0.05,0.000262445541838134,-0.0002336024691358025,0.00017202194787379458,0.013316215382546142,0.032271477592955886,0.29428076214897475,76.98386822546124,77.79298014411123,80.20086457026132,77.94615061776867,105.85595961009899,107.38652010288236,108.40679560277025,105.2714918616394,0.0073916735253771945,-0.0040363319615912205,0.0017717421124832536,0.03240173076314996,0.027307540307626357,0.016963723301188557
0.06,0.00035872249657064426,-0.00027973347050754465,0.00019104938271604464,0.013634759196189151,0.03254678646833977,0.29444665979991536,77.15081023631677,78.42458804045667,80.61163860916582,77.74662480632516,105.13078435876959,107.99958770140886,107.9185544684863,106.75009213710906,0.009627695473251024,-0.004613100137174217,0.0019027434842250064,0.03868117110286445,0.035839078849734245,0.01999497874794278
0.07,0.000476116735253772,-0.00033323050754458167,0.0002169314128943685,0.014015064333050707,0.032907868682682695,0.29464159869744644,77.20772116993668,79.12106535849315,80.73505949921781,77.66426662265121,104.41352196622353,108.48417804555069,107.26853288148088,107.90396602355396,0.011739423868312773,-0.005349703703703702,0.0025882030178323865,0.04550335324809466,0.04545889957205271,0.023102824566716505
0.08,0.0006141045267489711,-0.0003949632373113855,0.00025510973936898753,0.014462496590473307,0.03336564905023893,0.29486610829863047,77.14826959349278,80.11226895145946,80.1995886911511,78.21273503503056,104.48466960389007,108.63178120559097,107.22651972396578,108.16244820280487,0.013798779149519914,-0.006173272976680384,0.0038178326474619024,0.05095538506184011,0.05569666436837921,0.025497199965659318
0.09,0.000773807818930041,-0.0004640419890260631,0.00030535116598078146,0.014963544713228897,0.033926242797092554,0.2951128568880234,77.01552517669084,81.16163905142967,79.53894559012647,78.97082448143703,105.50588300785158,108.41722713064976,107.21545712292016,108.26729895094266,0.01597032921810699,-0.006907875171467757,0.005024142661179393,0.05293903988157761,0.06649847945475817,0.026342793633568267
0.1,0.000956642249657064,-0.0005374689849108367,0.0003610631001371588,0.015483999706240925,0.034595092545843496,0.2953661536048211,76.81667684529901,81.94757736615607,79.32714978148009,79.68942605491219,107.262596099615,107.77601112330126,106.79675966272717,108.66167759481444,0.018283443072702295,-0.007342699588477365,0.005571193415637731,0.05145443079635017,0.07734761263745911,0.02549911643523478
0.11,0.0011634144032921802,-0.000611522427983539,0.0004144019204389426,0.01598972433078384,0.03537242171496083,0.2956089856208176,76.89514606420505,82.1897758504921,79.47461377257846,80.30189205295827,108.24320335744082,107.6336671247761,106.74255416070466,108.88366630810484,0.020677215363511626,-0.007405344307270225,0.005333882030178385,0.04859304876119361,0.0873063269281264,0.023459848169006637
0.12,0.0013943152263374472,-0.0006838766941015088,0.00046257887517145554,0.016467358232346442,0.036249122036825274,0.29582944793524363,77.34040371846064,82.01757745315089,79.73675532762692,80.47401300464391,107.47116887649634,108.87516589969623,106.91033116644648,109.13504241915706,0.023090082304526693,-0.007235426611796984,0.004817695473251292,0.047145485711091235,0.09501960851945719,0.02096875157473427
0.13,0.001649769958847735,-0.0007541723456790122,0.0005100768175582914,0.016931213765615058,0.03720263986586071,0.2960233227777789,77.84659826453847,81.37904580357059,80.06407666495238,80.1294908415806,106.07369338797785,110.60116367806272,107.17483873633628,109.41136573303812,0.02554547325102879,-0.007029565157750338,0.004749794238683585,0.04798806392691552,0.09999977092957481,0.018504076955317986
0.14,0.0019305310013717405,-0.0008231363237311384,0.0005657736625514381,0.01740421198761643,0.038205624893335,0.2961912786409946,78.12283999917194,80.44397484753513,79.97656886919694,80.25491614917595,105.02877155276009,112.01127380826875,107.49712268023858,110.02893742981176,0.02807610425240054,-0.0068963978052126165,0.005569684499314668,0.04932902704524937,0.10346499136568511,0.016207041518652324
0.15,0.0022385364883401905,-0.0008897432098765431,0.0006363511659807984,0.01789131176284963,0.03924293661697262,0.2963351999010007,78.24010292152484,79.66046355329605,79.3688915297589,80.78968371870434,105.12630001693783,112.6238767657546,107.511585333602,111.33843090355764,0.030800548696845002,-0.0066606886145404755,0.007057750342936032,0.04796586341867331,0.1083697839515185,0.01397592996161099
0.16,0.002577120713305897,-0.0009499804663923182,0.0007227956104252455,0.01836548723930399,0.04032895943457271,0.2964554415070791,78.41723106275572,79.49079879091956,78.92777513056001,81.69509692752469,106.92534089404779,112.1500497278929,107.09548458658305,113.23356370480722,0.03385842249657065,-0.006023725651577508,0.008644444444444715,0.04223688952948858,0.11799657822119727,0.011947174049949043
0.17,0.0029515130315500675,-0.0009965782990397805,0.00082105212620028,0.018783039269582084,0.04151091847579611,0.29655312654508775,79.09452360178544,79.72335092680981,78.83193887478956,83.05557850513719,109.42570996353848,111.22646343560105,106.78917439913747,115.00379995992353,0.037439231824417045,-0.0046597832647462265,0.009825651577503446,0.033828010358826516,0.13420223659689556,0.010459274764257231
0.18,0.003367404389574759,-0.0010223464609053498,0.000927965706447192,0.019116978878958808,0.042854666876142034,0.29663240498035304,79.94625964610991,80.32285579999294,78.74259464150087,84.34879368351385,110.5324477685414,111.5804023310803,107.57307785326185,115.64995973019725,0.04158913580246913,-0.0025768161865569357,0.010691358024691197,0.02694462164480643,0.15658301447345144,0.010155874380477485
0.19,0.00383101659807956,-0.0010226890809327846,0.0010441646090534997,0.019382074161322864,0.044422150502010496,0.29670391982223476,81.04768900022586,81.10559929319929,78.65409105013431,85.10008093083016,110.38990426348157,113.09676928453531,108.87202544768972,115.4599387167924,0.046361220850480105,-3.426200274347403e-05,0.01161989026063077,0.024946736452731457,0.18315125616215466,0.011686188730372905
0.2,0.0043487866941015075,-0.0009972333882030176,0.0011735486968449923,0.01962635197667742,0.04625558170664509,0.29678514820725654,81.88300688909389,81.8051587997355,79.04695784414109,85.27637781491777,110.0333321140955,114.49670224184582,110.05326163653754,115.13437431183928,0.051777009602194765,0.002545569272976696,0.012938408779149257,0.027491782494981586,0.21176067408477192,0.01575008383963708
0.21,0.0049281480109739356,-0.000947169903978052,0.001318777777777774,0.019893987106359774,0.04837586827855431,0.2969008920550859,82.03149741570701,82.43401957096492,79.85141485263033,85.14485408662897,109.86160794664059,115.13455668942912,111.05558551097064,115.16726467756042,0.057936131687242806,0.005006348422496561,0.014522908093278171,0.030677127889076984,0.2413198787303948,0.02230021281131588
0.22,0.005575259396433469,-0.0008725085185185185,0.0014807215363511579,0.020189974670876083,0.05079302046399408,0.29707558424184954,82.03505974998147,83.02857641465185,80.6311015016335,84.92176526297317,111.03883690937171,114.32395149973784,112.03861518541201,115.60224735838152,0.06471113854595338,0.007466138545953349,0.01619437585733839,0.03008683898268786,0.2714910133484623,0.029932130313235782
0.23,0.006293187928669408,-0.0007704690809327845,0.0016603607681755692,0.020475646164085613,0.05351341235550598,0.29731964834477304,82.68556574730344,83.24423165093016,81.28963323378512,85.08563866337994,113.24549398916996,112.47639360390397,112.66649764916062,116.69671699257611,0.0717928532235939,0.010203943758573399,0.01796392318244113,0.02384540423746113,0.30193311350915075,0.036007645148171154
0.24,0.007080519341563784,-0.0006373396159122084,0.0018617626886145203,0.020694840482202832,0.05653947231168854,0.2976173155395637,83.47366268512145,82.9341785198118,81.63510934502807,85.27382267551978,115.01116924157394,110.72883561688846,113.29044612765927,117.99575348257105,0.07873314128943754,0.013312946502057613,0.02014019204389511,0.013234318526419995,0.33119879136300967,0.03848568651653052
0.25,0.007933393004115222,-0.0004707892729766803,0.0020908079561042263,0.020805435654739843,0.059858702284513905,0.29793293898314305,84.55883477602158,82.15013676803675,81.91390034440799,85.1556349754466,116.4645184856349,109.72016394329566,114.16448386886896,118.63166788054166,0.08528736625514387,0.016655034293552806,0.022904526748970592,0.0010147134618985133,0.35718498695028006,0.03741298175333764
0.26,0.008847081893004111,-0.00027087598079561043,0.0023525665294924247,0.020793201235342295,0.06343754854773889,0.2982320093776576,85.85018251563363,81.41163111230541,82.71220135619731,84.71902647143608,118.09315006623183,109.55357673681087,114.1202091169492,119.19395169805699,0.09136888888888889,0.01999132921810699,0.02617585733881984,-0.010491465554758932,0.3777440000742146,0.03472135276451284
0.27,0.009816536488340187,-3.92592043895748e-05,0.0026494183813442745,0.020666274975345567,0.06722137661545027,0.2984999101732065,86.38945495884815,81.00647358761573,83.80663536018055,84.46290063934765,119.05818795112711,110.61410088356438,112.9258821596301,120.30716984974936,0.09694545953360753,0.023161677640603562,0.029685185185184978,-0.020315583364073426,0.3916760039474632,0.03217666709104596
0.28,0.01083500727023319,0.00022188340192043883,0.002982135802469104,0.02044150582911699,0.07114393449833788,0.2987399424990491,86.5024736896374,80.80786765633924,84.13468899934843,85.01691557824113,119.4066127655696,112.30413060447583,111.77818217308861,121.44861434233019,0.10184707818930039,0.02611426063100136,0.03327174211248296,-0.028394960439107268,0.39860671130528263,0.03000077147511175
0.29,0.01189386858710562,0.0005096318381344305,0.003351999999999972,0.02013623049603248,0.07513528551104952,0.2989576532367102,86.75192297152628,80.7303898964017,83.95367363087934,85.95354392549662,120.67445642152065,112.88782247031074,112.44928109671606,121.55085168588825,0.10588613168724288,0.028774843621399166,0.03698641975308681,-0.035092086571204016,0.398796727252196,0.027145960980231493
0.3,0.012983856515775029,0.0008197344032921806,0.0037627297668038186,0.019764932620095182,0.07912789469783671,0.2991479948913659,87.06809258489355,80.65717310034687,83.94240458032505,86.46487987187258,122.77972990169881,112.0464901068482,114.90552260607937,120.65858080571266,0.10899879286694093,0.031010256515775006,0.04107297668038464,-0.04047892992779616,0.3928598560309083,0.022744229363662667
0.31,0.014097472976680379,0.0011459003429355277,0.004221773662551423,0.019342165065649623,0.08306020694846902,0.2992970378075526,87.31462784256834,80.66801362395434,84.01975258287577,86.16579173335245,124.73052225021345,110.91984627157794,117.49006968883718,119.9566936137309,0.11136164609053499,0.03261659396433471,0.045904389574760465,-0.04437780870044387,0.3816325988176059,0.017013539925959838
0.32,0.015230302331961584,0.0014802789300411515,0.004740577503429342,0.01888427174041299,0.08687909831565763,0.2993927435428625,87.59497325623227,80.71287783328488,84.44173748478394,85.6353548890013,126.15796462169075,110.51035279954979,119.61481441090916,119.6327397426805,0.11328293552812056,0.03343785871056239,0.051880384087791845,-0.04612960284432045,0.3659609636650232,0.010883266954959142
0.33,0.01638117873799725,0.0018141932098765423,0.0053338257887517015,0.018413532317996202,0.0905401027870317,0.2994320414501074,87.72955273200098,80.92766260132183,85.25975612958207,85.75260139638871,127.16508709829732,110.90138964503815,120.7024219125746,119.96889872575615,0.11508764060356655,0.03339142798353908,0.05932482853223597,-0.0450996800592131,0.3463121500457041,0.005283359978016091
0.34,0.017551072976680376,0.0021397540877914943,0.006017459533607667,0.017957758490717513,0.09400360601793725,0.2994208850296957,88.11201706552795,81.42836728186339,85.69989774620154,86.14535740395547,127.32925105215367,112.44583377469922,120.87698978168824,120.79060008891217,0.11698942386831265,0.0325560877914952,0.06836337448559654,-0.04099966212840264,0.3230640536632837,0.00045512724835365843
0.35000000000000003,0.018742249382716042,0.0024515690809327837,0.006806399176954716,0.017547334663237914,0.09723380702375864,0.2993674035328777,89.02842671325935,82.2360058627689,86.21320762392368,86.9708007286379,127.03171470404261,114.8622860075154,122.04463985587952,120.54666463220913,0.11911764060356655,0.031181499314128936,0.0788939643347049,-0.03473166414888522,0.2969300035394933,-0.003793309271708894
0.36,0.019958061316872423,0.0027482238820301774,0.007712582990397787,0.017203700591603026,0.1002019874872406,0.2992775548010964,90.05452939412848,83.08339165636738,87.03739164222979,87.66156643992885,126.95786555629677,117.42334486804711,123.60877441294762,119.83505101370936,0.12158119341563814,0.029665480109739364,0.09061838134430712,-0.028325047049163207,0.2696740654815515,-0.008060488621658108
0.37,0.021203488614540463,0.0030324897256515763,0.008744219478737977,0.016928513381976908,0.10289694939981167,0.2991509744683733,90.73356000001803,83.9724981295051,87.52634032845292,87.9248047860892,126.94857202835453,119.79093793644486,123.86250058407263,120.33103297858293,0.12454272976680399,0.0284265843621399,0.10316364883401902,-0.024283374464749586,0.24348868648589866,-0.01268084541095303
0.38,0.022485076406035663,0.0033099433333333315,0.009907064471879268,0.01669870482734625,0.10532935216231393,0.29898363775963044,91.17092327302701,84.71737881670056,87.41707607647257,87.89691521614795,127.2552801840526,121.4682201028865,122.73599022654699,122.74216649963053,0.12815877914951998,0.027745360768175516,0.11628449931412911,-0.023856432511097543,0.22038815586835042,-0.017416830545982864
0.39,0.023809576954732504,0.0035870009602194768,0.011206805212620012,0.01647845163502567,0.10753003432313027,0.2987736585872999,91.74093671270572,85.23173356773258,87.48698172355886,87.91551276070085,128.43328585527678,121.70532479335212,121.85720142623015,125.0220718066674,0.13245005486968406,0.027705762688614525,0.12997407407407435,-0.02630311755615105,0.20081887305538806,-0.021153509500391413
"""
    ]
    return data[idx % len(data)]


def get_quadcopter_state_names() -> List[str]:
    return ['phi', 'psi', 'theta', 'p', 'q', 'r', 'dx', 'dy', 'dz']


def get_quadcopter_control_names() -> List[str]:
    return ['n1', 'n2', 'n3', 'n4']


def get_cpu_device_name() -> str:
    return 'cpu'


def get_window_size() -> int:
    return 3


def get_horizon_size() -> int:
    return 2


def get_time_delta() -> float:
    return 0.5


def get_evaluation_mode() -> Literal['train', 'validation', 'test']:
    return 'test'


def prepare_directories(
    base_path: pathlib.Path,
) -> Dict[str, pathlib.Path]:
    models_directory = base_path.joinpath('models')
    models_directory.mkdir(exist_ok=True)

    dataset_directory = base_path.joinpath('data')
    train_directory = dataset_directory.joinpath('processed').joinpath('train')
    validation_directory = dataset_directory.joinpath('processed').joinpath(
        'validation'
    )
    test_directory = dataset_directory.joinpath('processed').joinpath('test')

    dataset_directory.mkdir(exist_ok=True)
    dataset_directory.joinpath('processed').mkdir(exist_ok=True)
    train_directory.mkdir(exist_ok=True)
    validation_directory.mkdir(exist_ok=True)
    test_directory.mkdir(exist_ok=True)

    result_directory = base_path.joinpath('results')
    result_directory.mkdir(exist_ok=True)

    configuration_path = base_path.joinpath('configuration.json')

    return dict(
        models=models_directory,
        data=dataset_directory,
        train=train_directory,
        validation=validation_directory,
        test=test_directory,
        configuration=configuration_path,
        result=result_directory,
    )


def run_generic_pipeline(
    base_path: pathlib.Path,
    model_name: str,
    config: ExperimentConfiguration,
    get_data_func: Callable[[int], str],
) -> None:
    # Activate for easier debugging when tests fail due to torch errors.
    torch.autograd.set_detect_anomaly(True)

    # Define and create temporary file paths and directories.
    paths = prepare_directories(base_path)

    # Setup dataset directory.
    paths['train'].joinpath('train-0.csv').write_text(data=get_data_func(0))
    paths['validation'].joinpath('validation-0.csv').write_text(data=get_data_func(1))
    paths['test'].joinpath('test-0.csv').write_text(data=get_data_func(2))

    # Run model training.
    train_model(
        model_name=model_name,
        device_name=get_cpu_device_name(),
        configuration=config,
        dataset_directory=str(paths['data']),
        models_directory=str(paths['models']),
    )

    # Run model testing.
    run_model(
        model_name=model_name,
        device_name=get_cpu_device_name(),
        mode=get_evaluation_mode(),
        configuration=config,
        dataset_directory=str(paths['data']),
        result_directory=str(paths['result']),
        models_directory=str(paths['models']),
    )

    explain_model(
        configuration=config,
        model_name=model_name,
        device_name=get_cpu_device_name(),
        mode=get_evaluation_mode(),
        dataset_directory=str(paths['data']),
        result_directory=str(paths['result']),
        models_directory=str(paths['models']),
    )

    # Run model evaluation.
    evaluate_model(
        config=config,
        model_name=model_name,
        mode=get_evaluation_mode(),
        result_directory=str(paths['result']),
        models_directory=str(paths['models']),
    )


def run_cartpole_pipeline(
    base_path: pathlib.Path,
    model_name: str,
    model_class: str,
    model_config: DynamicIdentificationModelConfig,
) -> None:
    control_names = get_cartpole_control_names()
    state_names = get_cartpole_state_names()

    configuration = ExperimentConfiguration(
        time_delta=0.02,
        window_size=get_window_size(),
        horizon_size=get_horizon_size(),
        control_names=control_names,
        state_names=state_names,
        initial_state_names=['x_1', 'x_2', 'x_3', 'x_4'],
        session=SessionConfiguration(total_runs_for_best_models=3),
        additional_tests=dict(
            bibo_stability=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing.stability.'
                'bibo.BiboStabilityTest',
                parameters=StabilityTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    optimization_steps=3,
                    optimization_lr=1e-3,
                    initial_mean_delta=0,
                    initial_std_delta=1e-3,
                    evaluation_sequence=1,
                    clip_gradient_norm=100,
                    regularization_scale=0.25,
                ),
            ),
            incremental_stability=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing.stability.'
                'incremental.IncrementalStabilityTest',
                parameters=StabilityTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    optimization_steps=3,
                    optimization_lr=1e-3,
                    initial_mean_delta=0,
                    initial_std_delta=1e-3,
                    evaluation_sequence=1,
                    clip_gradient_norm=100,
                    regularization_scale=0.25,
                ),
            ),
            bounded_residual=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing'
                '.bounded_residual.BoundedResidualInferenceTest',
                parameters=BoundedResidualInferenceTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    thresholds=[0.5, 1.0],
                ),
            ),
        ),
        models={
            model_name: dict(
                model_class=model_class,
                parameters=model_config,
            )
        },
        metrics=dict(
            rmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.RootMeanSquaredErrorMetric',
                parameters=RootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            mse=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.MeanSquaredErrorMetric',
                parameters=MeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            mae=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.MeanAbsoluteErrorMetric',
                parameters=MeanAbsoluteErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            nrmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.'
                'NormalizedRootMeanSquaredErrorMetric',
                parameters=NormalizedRootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            dr=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.RefinedIndexOfAgreementMetric',
                parameters=RefinedIndexOfAgreementMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            fit=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.FitRatioMetric',
                parameters=FitRatioMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            e=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.EfficiencyMetric',
                parameters=EfficiencyMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            e1=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.RefinedEfficiencyMetric',
                parameters=RefinedEfficiencyMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            r=ExperimentMetricConfiguration(
                metric_class='deepsysid.metrics.'
                'PearsonProductMomentCorrelationCoefficientMetric',
                parameters=PearsonProductMomentCorrelationCoefficientMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
        ),
        target_metric='rmse',
        explanation_metrics=dict(
            infidelity=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics.NMSEInfidelityMetric',
                parameters=NMSEInfidelityMetric.CONFIG(state_names=state_names),
            ),
            robustness=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics.LipschitzEstimateMetric',
                parameters=LipschitzEstimateMetric.CONFIG(
                    state_names=state_names,
                    n_disturbances=5,
                    control_error_std=[0.1 for _ in control_names],
                    state_error_std=[0.1 for _ in state_names],
                ),
            ),
            simplicity=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics'
                '.ExplanationComplexityMetric',
                parameters=ExplanationComplexityMetric.CONFIG(
                    state_names=state_names, relevance_threshold=0.1
                ),
            ),
        ),
        explainers=dict(
            switching_lstm_explainer=ExperimentExplainerConfiguration(
                explainer_class='deepsysid.explainability'
                '.explainers.switching.SwitchingLSTMExplainer',
                parameters=BaseExplainerConfig(),
            ),
        ),
    )

    run_generic_pipeline(
        base_path=base_path,
        model_name=model_name,
        config=configuration,
        get_data_func=get_cartpole_data,
    )


def run_4dof_ship_pipeline(
    base_path: pathlib.Path,
    model_name: str,
    model_class: str,
    model_config: DynamicIdentificationModelConfig,
) -> None:
    control_names = get_4dof_ship_control_names()
    state_names = get_4dof_ship_state_names()

    configuration = ExperimentConfiguration(
        time_delta=get_time_delta(),
        window_size=get_window_size(),
        horizon_size=get_horizon_size(),
        control_names=control_names,
        state_names=state_names,
        initial_state_names=state_names,
        session=SessionConfiguration(total_runs_for_best_models=3),
        tracker=dict(
            mlflow=ExperimentTrackingConfiguration(
                tracking_class="deepsysid.tracker.mlflow_integration.MlFlowTracker",
                parameters={},
            )
        ),
        additional_tests=dict(
            bibo_stability=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing.stability.'
                'bibo.BiboStabilityTest',
                parameters=StabilityTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    optimization_steps=3,
                    optimization_lr=1e-3,
                    initial_mean_delta=0,
                    initial_std_delta=1e-3,
                    evaluation_sequence=1,
                    clip_gradient_norm=100,
                    regularization_scale=0.25,
                ),
            ),
            incremental_stability=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing.stability.'
                'incremental.IncrementalStabilityTest',
                parameters=StabilityTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    optimization_steps=3,
                    optimization_lr=1e-3,
                    initial_mean_delta=0,
                    initial_std_delta=1e-3,
                    evaluation_sequence=1,
                    clip_gradient_norm=100,
                    regularization_scale=0.25,
                ),
            ),
            bounded_residual=ExperimentTestConfiguration(
                test_class='deepsysid.pipeline.testing'
                '.bounded_residual.BoundedResidualInferenceTest',
                parameters=BoundedResidualInferenceTestConfig(
                    control_names=control_names,
                    state_names=state_names,
                    window_size=get_window_size(),
                    horizon_size=get_horizon_size(),
                    thresholds=[0.5, 1.0],
                ),
            ),
        ),
        models={
            model_name: dict(
                model_class=model_class,
                parameters=model_config,
            )
        },
        metrics=dict(
            rmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.RootMeanSquaredErrorMetric',
                parameters=RootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            trajectory_rmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics'
                '.Trajectory4DOFRootMeanSquaredErrorMetric',
                parameters=Trajectory4DOFRootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            mse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.MeanSquaredErrorMetric',
                parameters=MeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            mae=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.MeanAbsoluteErrorMetric',
                parameters=MeanAbsoluteErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            nrmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.'
                'NormalizedRootMeanSquaredErrorMetric',
                parameters=NormalizedRootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
        ),
        target_metric='rmse',
        explanation_metrics=dict(
            infidelity=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics.NMSEInfidelityMetric',
                parameters=NMSEInfidelityMetric.CONFIG(state_names=state_names),
            ),
            robustness=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics.LipschitzEstimateMetric',
                parameters=LipschitzEstimateMetric.CONFIG(
                    state_names=state_names,
                    n_disturbances=5,
                    control_error_std=[0.1 for _ in control_names],
                    state_error_std=[0.1 for _ in state_names],
                ),
            ),
            simplicity=ExperimentExplanationMetricConfiguration(
                metric_class='deepsysid.explainability.metrics'
                '.ExplanationComplexityMetric',
                parameters=ExplanationComplexityMetric.CONFIG(
                    state_names=state_names, relevance_threshold=0.1
                ),
            ),
        ),
        explainers=dict(
            switching_lstm_explainer=ExperimentExplainerConfiguration(
                explainer_class='deepsysid.explainability'
                '.explainers.switching.SwitchingLSTMExplainer',
                parameters=BaseExplainerConfig(),
            ),
            lime_explainer=ExperimentExplainerConfiguration(
                explainer_class='deepsysid.explainability'
                '.explainers.lime.LIMEExplainer',
                explained_super_classes=[
                    'deepsysid.models.base.DynamicIdentificationModel',
                ],
                parameters=LIMEExplainerConfig(num_samples=6, cv_folds=2),
            ),
        ),
    )

    run_generic_pipeline(
        base_path=base_path,
        model_name=model_name,
        config=configuration,
        get_data_func=get_4dof_ship_data,
    )


def run_quadcopter_pipeline(
    base_path: pathlib.Path,
    model_name: str,
    model_class: str,
    model_config: DynamicIdentificationModelConfig,
) -> None:
    control_names = get_quadcopter_control_names()
    state_names = get_quadcopter_state_names()

    configuration = ExperimentConfiguration(
        time_delta=get_time_delta(),
        window_size=get_window_size(),
        horizon_size=get_horizon_size(),
        control_names=control_names,
        state_names=state_names,
        initial_state_names=state_names,
        session=SessionConfiguration(total_runs_for_best_models=3),
        additional_tests=dict(),
        models={
            model_name: dict(
                model_class=model_class,
                parameters=model_config,
            )
        },
        metrics=dict(
            rmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.RootMeanSquaredErrorMetric',
                parameters=RootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            nrmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.'
                'NormalizedRootMeanSquaredErrorMetric',
                parameters=NormalizedRootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
            trajectory_rmse=ExperimentMetricConfiguration(
                metric_class='deepsysid.pipeline.metrics.'
                'TrajectoryNED6DOFRootMeanSquaredErrorMetric',
                parameters=TrajectoryNED6DOFRootMeanSquaredErrorMetric.CONFIG(
                    state_names=state_names, sample_time=get_time_delta()
                ),
            ),
        ),
        target_metric='rmse',
        explanation_metrics=dict(),
        explainers=dict(),
    )

    run_generic_pipeline(
        base_path=base_path,
        model_name=model_name,
        config=configuration,
        get_data_func=get_quadcopter_data,
    )
